---
# These are mandatory - we don't supply defaults
#tt_src_dir: /opt/templates/app/config
#tt_dest_dir: /tmp/app

# Whether to explicitly set owner/group
#tt_owner: someuser
#tt_group: somegroup

# By default the file/directory modes are retained.
# But you can explicitly set them if needed
# tt_dir_mode: "0770"
# tt_file_mode: "0440"

# Limit templating to source file name regex.
# By default we template everything ('^$').
# The files names that do NOT match this regex will be copied as-is.
# Useful for mixed content like scripts, images, etc.
# See https://docs.python.org/3/library/re.html#regular-expression-syntax
# and the inline flags
tt_filename_regex: '.*'
#tt_file_regex: '^\.(php|html|css)(\.j2)?$'
#tt_file_regex: '(?i)^\.(php|html|css)$' # case insensitive


# Remove part(s) of the source file names using a regex.
# Useful for stripping jinja extenstions (the default)
tt_filename_strip_regex: '\.(j2)$'

# Optionally validate files.
# Items in this list consist of:
# regex:    file name regular expressions
# validate: the command should be used to validate. This is passed to
#           either the template or copy module.
# If 'tt_filename_regex' is used to only template a subset of
# all files, the rest of the files are copied using the 'copy' module.
# But since this module also support validation, you can also use it here.
# An example use case would be template a web server directory, where the
# PHP files are templated, images are copied, but images are also checked
# for integrity.
# Make sure the commands used for validation are available on the remote host.
# Make sure to include any .j2 matching in the regex.
# Make sure the regular expressions do not overlap.
tt_validation: []
#tt_validation:
#  - name: PHP files
#    regex: '\.php(\.j2)?$'
#    validate: 'php -l %s'
#  - name: X.509 certificates
#    regex: '\.ce?rt$'
#    validate: 'openssl x509 -noout -in %s'
#  - name: Images
#    regex: '\.(?i)(jpe?g|png|gif|bmp)$'
#    validate: 'identify %s'
#  - name: XML files
#    regex: '\.xml(\.j2)?$'
#    validate: 'xmllint %s'
#  - name: YAML files
#    regex: '\.ya?ml$'
#    validate: 'yamllint -d relaxed %s'
#  - name: JSON files
#    regex: '\.json$'
#    validate: 'jsonlint %s'

# Remove remote content
tt_delete: false
