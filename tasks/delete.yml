---
- name: Find remote content
  ansible.builtin.find:
    paths: "{{ tt_dest_dir }}"
    recurse: true
    file_type: any
    hidden: true
  register: _remote

- name: Establish lists of local and remote content
  ansible.builtin.set_fact:
    _remote_paths: "{{ _remote| json_query('files[].path') | map('relpath', tt_dest_dir) }}"
    _local_paths: "{{_files_to_rename | json_query('[].new_path') | union(
      _files_to_not_rename | union(_dirs) | json_query('[].path')) |
      map('relpath', tt_src_dir) }}"

- name: Set content to be removed
  ansible.builtin.set_fact:
    _remove: "{{ _remote_paths | difference(_local_paths) | reject('regex', tt_delete_exclude_pattern) }}"

- name: Ensure remote content is removed
  ansible.builtin.file:
    path: "{{ tt_dest_dir }}/{{ remotepath }}"
    state: absent
  loop: "{{ _remove }}"
  loop_control:
    loop_var: remotepath
  register: tt_result_delete

- name: Set changed status for deleted content
  ansible.builtin.set_fact:
    tt_delete_changed: true
  when: tt_result_delete.changed | bool
